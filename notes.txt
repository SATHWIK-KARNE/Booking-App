1) in next js routes will be defined in app folder
so if x folder is created inside app => /x endpoint. this folder can have subfolder(y)=> /x/y endpoint.

2) each of these folders should have page.jsx to show pages

3)[id] is called slug so it will accept any number as endpoint ex: /properties/1

4) api folder in app will have server api's. They will make direct requests to mongoDB to get data 
5) /api/properties will fetch all properties from mongoDB using Property.find({}) f(n)
6) /api/properties/id will fetch 1 property from mongoDB using it's id => Property.findById(params.id);

7)these api's will just show data on page.  fetchProperties() and fetchProperty(id) functions will get data from above api's

7)/properties will call fetchProperties() to get all properties and shows all properties cards

8)but we have a problem with /properties/id while calling fetchProperty(id) cuz id is dynamic and determined at calling time
-> so This page relies on client-side specific features, like the browser's URL parameters, to fetch the correct property data.
->Since the id parameter is dynamic, the page can't be pre-rendered on the server(SSR). Instead, the client-side component needs to fetch the data using useEffect and render the property details accordingly(CSR).Therefore only this page uses client side not /properties page


9)NEXTAUTH_URL_SECRET=>Used to encrypt the NextAuth.js JWT, and to hash email verification tokens. This is the default value for the secret option in NextAuth and Middleware.
to generate this secret(linux)=> openssl rand -base64 32

10)providers(google) After calling getProviders() result is an object:

  google: 
    callbackUrl: "http://localhost:3000/api/auth/callback/google"
    id: "google"
    name: "Google"
    signinUrl: "http://localhost:3000/api/auth/signin/google"
    type: "oauth"
  And we loop through this object to get id and pass it to signIn in button:
    <button onClick={()=>signIn(provider.id)}
  which will show signin with google page

11)form is submitted at route POST. The images selected in form should be uploaded to cloudinary.The process is:

   -select image in form 
   -turn it into array buffer. Get data from that
   -upload it to cloudinary and cloudinary gives url as Response
   -put that url in images array() and later to db. 

12)newly added property will not show up in /property unless we do hard refresh. To fix it 2 ways
  -add timestamps to end of URL in request.js like=>
       const res= await fetch(`${apiDomain}/properties?_=${timestamp}`); 
  -dont store cache=> const res= await fetch(`${apiDomain}/properties`,{cache:"no-store"}); 

13) the route /api/properties/user/:userId will get all properties of 1 user. This result is called in /profile/page.jsx page

14)Edit property=> looks same as add property page(propertyAddForm.jsx) but we need "PUT" like functionality instead of POST. So we use handleSubmit() f(n) in form onSubmit instead of form action.
But handling Image(handleImageChange()) changes here is too much work so it's not implemented here. Also removed selecting images in edit form. images[] is removed from state(fields) as well.

15)While editing form, all fields are preloaded with prev values using "fetchProperty()" from utils/requests.js.

16) PUT route api is similar to add property route(POST) api(properties/route.js). Instead of saving property by .save() we update it by findByIdAndUpdate(id). So in /properties/:id/edit page we update values and submit which will send PUT request to /api/properties/:id

17) After bookmarking if we reload it is gone cuz we page reloads we need to check if it is bookmarked or not. Done using api/bookmarks/check/route.js.
This is similar to "add bookmark" in bookmarks/route.js. Here we just check and return and do nothing else.

18)/api/bookmarks show all bookmarks of current user